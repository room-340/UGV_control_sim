function UGV_prime = set_vel_ctrl(UGV, vel, rate)
    % This function is used to set the desired values for UGV kinematic
    % parameters. The parameters themselves will start approaching these
    % desired values in the followup get_move() function calls. It might
    % take some time for parameters to actually reach the desired values.
    % Keep in mind that gamma values always come in DEGREES!
    
    % Due to a certain level of approximation, the actual velocity values
    % generated by the robot might be slightly different!
    
    
    if vel == 0
        if rate ~= 0
            gamma = sign(rate) * 25;
            w = 3.7;
            UGV_prime = set_kin_ctrl(UGV, [w, w, w, w], [gamma, -gamma]);
            return;
        else
            % Yup, it is how it works on the real robot. Should probably
            % fix it to remember the last wheelset angle positions when
            % stoping...
            UGV_prime = set_kin_ctrl(UGV, [0, 0, 0, 0], [0, 0]);
        end
    else
        tang = rate * (UGV.lf + UGV.lr) / abs(vel) / 2;
        gamma = atan(tang) * 180.0 / pi;
        if abs(gamma) > 30
            gamma = sign(gamma) * 30;
        end
        if rate == 0
            w1 = vel / UGV.rw; % Wheels rotation speed
            w2 = vel / UGV.rw;
            w3 = vel / UGV.rw;
            w4 = vel / UGV.rw;
        else
            Rc = abs(vel / rate); % Assumed turn radius
            % Not sure why it has sign(vel) in it, since the robot cannot
            % move backwards at the moment, but this comes straight from
            % code on the real robot...
            v1 = abs(rate) * sqrt(UGV.lf^2 + (Rc + sign(rate) * (UGV.lw/2))^2) * sign(vel);
            v2 = abs(rate) * sqrt(UGV.lf^2 + (Rc - sign(rate) * (UGV.lw/2))^2) * sign(vel);
            v3 = abs(rate) * sqrt(UGV.lr^2 + (Rc + sign(rate) * (UGV.lw/2))^2) * sign(vel);
            v4 = abs(rate) * sqrt(UGV.lr^2 + (Rc - sign(rate) * (UGV.lw/2))^2) * sign(vel);
            w1 = v1 / UGV.rw;
            w2 = v2 / UGV.rw;
            w3 = v3 / UGV.rw;
            w4 = v4 / UGV.rw;
        end
        UGV_prime = set_kin_ctrl(UGV, [w1, w2, w3, w4], [gamma, -gamma]);
    end

end

